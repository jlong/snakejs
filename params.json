{"name":"Snake.js","tagline":"The micro selector and events library for IE8+ perfectly suited for widgets and simple applications or websites.","body":"### Selecting elements\r\n\r\nThe $ function (aka snake function) can be used as a cross-browser\r\nquerySelector(). Compared to jQuery the functionality it supports is quite\r\nlimited, but it works well for some applications.\r\n\r\nIn its simplest form it only looks up divs by a class name:\r\n\r\n    $('content')                // Find a div with a class of 'content'\r\n\r\nBut you can also pass a specific tag to find other types of tags:\r\n\r\n    $('a', 'external')          // Find a link with a class of 'external'\r\n\r\nIt can also be invoked on an element to find child elements:\r\n\r\n    $(el, 'post')               // Find a div with a class of 'post' inside of el\r\n    $(el, 'article', 'post')    // Find an article tag with a class of 'post' inside of el\r\nThe $.all function is similar to the $ function except that much like\r\nquerySelectorAll() it returns an array of matching elements. In the\r\nevent that no elements are found an empty array is returned.\r\n\r\nThe $.all function supports the same parameters as the $ function:\r\n\r\n    $.all('post')               // All divs with a class name of 'post'\r\n    $.all(el, 'post')           // All 'post' divs inside of el\r\n\r\n    $.all('a', 'external')      // All links with a class name of 'external'\r\n    $.all(el, 'a', 'external')  // All 'external' links inside of el\r\n\r\n\r\n### Retreiving IDs\r\n\r\nThe $.identify function can be used to obtain an ID for a given element:\r\n\r\n    var el = document.createElement('div');\r\n    el.id = 'main';\r\n    $.identify(el);   // => 'main'\r\n\r\nIf the element doesn't have an ID, One will be generated for it. For instance:\r\n\r\n    var el = document.createElement('div');\r\n    $.identify(el);   // => 'snakejs-1'\r\n\r\n\r\n### Storing data\r\n\r\nThe $.data function can be used to associate and retrieve arbitrary data with\r\nan element. The data is stored in a global object and associated by the ID\r\nof the element. If the element does not have an ID, the $.identify function\r\nis used to ensure that it does.\r\n\r\nTo store data for an element, pass in a key and value:\r\n\r\n    $.data(el, 'tooltip', 'An example tooltip.');\r\n\r\nTo retrieve data for an element, simply pass in the key:\r\n\r\n    $.data(el, 'tooltip'); // => \"An example tooltip.\"\r\n\r\n\r\n### Manipulating classes\r\n\r\nUse the $.addClass function to add a class to an element:\r\n\r\n    $.addClass(el, 'is-hidden');\r\n\r\nUse the $.removeClass function to remove a class from an element:\r\n\r\n    $.removeClass(el, 'is-hidden');\r\n\r\nUse the $.hasClass function to test if an element has a class:\r\n\r\n    if ($.hasClass(el, 'is-hidden') {\r\n      // el is hidden\r\n    }\r\n\r\n\r\n### Getting dimensions and offset\r\n\r\nUse the $.dimensions function to retreive the width and height of an element.\r\nThis function should work even if the element is invisible. Just call:\r\n\r\n    $.dimensions(el)  // => { width: 200, height: 100 }\r\nUse the $.offset function to get an element's coordinates relative to the\r\nentire page:\r\n\r\n    $.offset(el)      // => { top: 10, left: 20 }\r\n\r\n\r\n### Adding and removing events\r\n\r\nUse the $.on function to add an event listener to an element. For example:\r\n\r\n    $.on(el, 'click', function(e) {\r\n      console.log('clicked');\r\n    });\r\n\r\nUse the $.off function to remove an event listener from an element:\r\n\r\n    var listener = function() { ... };\r\n    $.on(el, 'click', listener);\r\n    $.off(el, 'click', listener);\r\nUse the $.one to add an event listener that will be removed the first time\r\nit is invoked:\r\n\r\n    $.one(el, 'mousemove', function(e) {\r\n      console.log('This should only ever be logged one time.');\r\n    });\r\n\r\n\r\n### DOM ready\r\n\r\nUse the $.ready function to add a DOM ready event listener. This listener\r\nwill be fired when the DOM has been fully loaded.\r\n\r\n    $.ready(function() {\r\n      console.log('The DOM is loaded!');\r\n    });\r\n\r\n\r\n### MIT License\r\n\r\nCopyright (c) 2013 John W. Long. Portions contributed by Austin Taylor,\r\nJonathan Novak, and Mark Martin.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is furnished\r\nto do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}