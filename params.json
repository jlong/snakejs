{"name":"Snake.js","tagline":"The lightweight querySelector and events library perfectly suited for widgets and simple applications or websites. Supports IE8+","body":"## Snake function and friends\r\n\r\nThe $ function (aka snake function) can be used as a cross-browser querySelector(). Compared to jQuery the functionality it supports is quite limited, but it works well for some applications.\r\n\r\nIn its simplest form it only looks up divs by a class name:\r\n\r\n    $('content')                // Find a div with a class of 'content'\r\n\r\nBut you can also pass a specific tag to find other types of tags:\r\n\r\n    $('a', 'external')          // Find a link with a class of 'external'\r\n\r\nIt can also be invoked on an element to find child elements:\r\n\r\n    $(el, 'post')               // Find a div with a class of 'post' inside of el\r\n    $(el, 'article', 'post')    // Find an article tag with a class of 'post' inside of el\r\n\r\nThe $.all function is similar to the $ function except that much like querySelectorAll() it returns an array of matching elements. In the event that no elements are found an empty array is returned.\r\n\r\nThe $.all function supports the same parameters as the $ function:\r\n\r\n    $.all('post')               // All divs with a class name of 'post'\r\n    $.all(el, 'post')           // All 'post' divs inside of el\r\n\r\n    $.all('a', 'external')      // All links with a class name of 'external'\r\n    $.all(el, 'a', 'external')  // All 'external' links inside of el\r\n\r\n\r\n## Events\r\n\r\nUse the $.on function to add an event listener to an element. For example:\r\n\r\n    $.on(el, 'click', function(e) {\r\n      console.log('clicked');\r\n    });\r\n\r\nUse the $.off function to remove an event listener from an element:\r\n\r\n    var listener = function() { ... };\r\n    $.on(el, 'click', listener);\r\n    $.off(el, 'click', listener);\r\n\r\nUse the $.one to add an event listener that will be removed the first time it is invoked:\r\n\r\n    $.one(el, 'mousemove', function(e) {\r\n      console.log('This should only ever be logged one time.');\r\n    });\r\n\r\nUse the $.ready function to add a DOM ready event listener. This listener will be fired when the DOM has been fully loaded.\r\n\r\n    $.ready(function() {\r\n      console.log('The DOM is loaded!');\r\n    });","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}